/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const app = express();
const fs = require("fs").promises;
const { v4: uuidv4 } = require("uuid");

app.use(express.json());

app.get("/todos", async (req, res) => {
  try {
    let data = await fs.readFile("todos.json", "utf-8");
    data = JSON.parse(data);
    return res.status(200).json(data);
  }
  catch (err) {
    return res.send(500).send("Internal Server Error");
  }
});

app.get("/todos/:id", async (req, res) => {
  try {
    const id = req.params.id;
    let data = await fs.readFile("todos.json", "utf-8");
    data = JSON.parse(data);
    data = data.filter((todo) => {
      if (todo.id === id) {
        return true;
      }
    });

    if (!data.length) {
      return res.status(404).send(`Unable to retrieve todo with id ${id}`);
    }
    return res.status(200).json(data[0]);
  }
  catch (err) {
    return res.status(500).send(`Internal Server Error`);
  }
});

app.post("/todos", async (req, res) => {
  try {
    const newTodo = req.body;
    newTodo.id = uuidv4();
    let data = await fs.readFile("todos.json", "utf-8");
    data = JSON.parse(data);
    data.push(newTodo);

    await fs.writeFile("todos.json", JSON.stringify(data), "utf-8");
    console.log("New todo is saved successfully");
    return res.status(201).json(newTodo);
  }
  catch (err) {
    return res.status(500).send("Interal Server Error");
  }
});

app.put("/todos/:id", async (req, res) => {
  try {
    const id = req.params.id;
    let data = await fs.readFile("todos.json", "utf-8");
    data = JSON.parse(data);

    const idx = data.findIndex(todo => todo.id === id);
    if (idx === -1) {
      return res.status(404).send('Todo not found');
    }

    const { completed, description, title } = req.body;
    if (completed) {
      data[idx].completed = completed;
    }
    if (description) {
      data[idx].description = description;
    }
    if (title) {
      data[idx].title = title;
    }

    await fs.writeFile("todos.json", JSON.stringify(data), "utf-8")
    return res.status(200).json("Todo has been updated successfully");
  }
  catch (err) {
    return res.status(500).send("Interal Server Error");
  }
});

app.delete("/todos/:id", async (req, res) => {
  try {
    const id = req.params.id;
    let data = await fs.readFile("todos.json", "utf-8");
    data = JSON.parse(data);

    const idx = data.findIndex(todo => todo.id === id)
    if (idx === -1) {
      return res.status(404).send('Todo not found');
    }

    data.splice(idx, 1);
    await fs.writeFile("todos.json", JSON.stringify(data), "utf-8");
    console.log("Todo deleted successfully");
    return res.status(200).send(`Todo has been deleted successfully`);
  }
  catch (err) {
    return res.status(500).send("Interal Server Error");
  }
});

module.exports = app;
